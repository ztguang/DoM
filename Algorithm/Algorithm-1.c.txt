
# The improved algorithm of MHRP (improve multi-hop routing protocol), the algorithm written in C language
#------------------------------------------------------------------------ 
route_multipath (struct rib *rib, int num_nexthop, int no_if)
{
  int hop_use = 0;
  for (nexthop = rib->nexthop; nexthop nexthop = nexthop->next)
  {
    ++hop_use;
    if (num_nexthop == 1 || (num_nexthop == 2 && (no_if == 1 || no_if == 3)) || (num_nexthop == 3 && (no_if == 1 || no_if == 4)) || (num_nexthop == 4 && no_if == 1))
    {
      // use the first hop
      if (hop_use < 1) continue;
      if (hop_use > 1) break;
    }
    if ((num_nexthop == 2 && (no_if == 2 || no_if == 4)) || (num_nexthop == 3 && no_if == 2) || (num_nexthop == 4 && no_if == 2))
    {
      // use the second hop
      if (hop_use < 2) continue;
      if (hop_use > 2) break;
    }
    if ((num_nexthop == 3 && no_if == 3) || (num_nexthop == 4 && no_if == 3))
    {
      // use the third hop
      if (hop_use < 3) continue;
      if (hop_use > 3) break;
    }
    if (num_nexthop == 4 && no_if == 4)
    {
      // use the fourth hop
      if (hop_use < 4) continue;
      if (hop_use > 4) break;
    }
    insert_nexthop_to_routingtable (nexthop);
  }
}
#------------------------------------------------------------------------



# add one routing entry per destination
#------------------------------------------------------
num_nexthop:	The number of nexthop 
no_if:		Correspond to virtual network interface (e1,e2,e3,e4)

if (num_nexthop == 1) use the first hop

if (num_nexthop == 2 && (no_if == 1 || no_if == 3)) use the first hop
if (num_nexthop == 2 && (no_if == 2 || no_if == 4)) use the second hop

if (num_nexthop == 3 && (no_if == 1 || no_if == 4)) use the first hop
if (num_nexthop == 3 && no_if == 2) use the second hop
if (num_nexthop == 3 && no_if == 3) use the third hop

if (num_nexthop == 4 && no_if == 1) use the first hop
if (num_nexthop == 4 && no_if == 2) use the second hop
if (num_nexthop == 4 && no_if == 3) use the third hop
if (num_nexthop == 4 && no_if == 4) use the fourth hop
#------------------------------------------------------


# the above algorithm is summarized as follows 
#------------------------------------------------------
if (num_nexthop == 1 || (num_nexthop == 2 && (no_if == 1 || no_if == 3)) || (num_nexthop == 3 && (no_if == 1 || no_if == 4)) || (num_nexthop == 4 && no_if == 1)) use the first hop

if ((num_nexthop == 2 && (no_if == 2 || no_if == 4)) || (num_nexthop == 3 && no_if == 2) || (num_nexthop == 4 && no_if == 2)) use the second hop

if ((num_nexthop == 3 && no_if == 3) || (num_nexthop == 4 && no_if == 3)) use the third hop

if (num_nexthop == 4 && no_if == 4) use the fourth hop
#------------------------------------------------------


# the above algorithm written in C language
#------------------------------------------------------
route_multipath (struct rib *rib, int num_nexthop, int no_if)
{

  int hop_use = 0;

  for (nexthop = rib->nexthop; nexthop nexthop = nexthop->next)
  {

    ++hop_use;

    if (num_nexthop == 1 || (num_nexthop == 2 && (no_if == 1 || no_if == 3)) || (num_nexthop == 3 && (no_if == 1 || no_if == 4)) || (num_nexthop == 4 && no_if == 1))
    {
      // use the first hop
      if (hop_use < 1) continue;
      if (hop_use > 1) break;
    }

    if ((num_nexthop == 2 && (no_if == 2 || no_if == 4)) || (num_nexthop == 3 && no_if == 2) || (num_nexthop == 4 && no_if == 2))
    {
      // use the second hop
      if (hop_use < 2) continue;
      if (hop_use > 2) break;
    }

    if ((num_nexthop == 3 && no_if == 3) || (num_nexthop == 4 && no_if == 3))
    {
      // use the third hop
      if (hop_use < 3) continue;
      if (hop_use > 3) break;
    }

    if (num_nexthop == 4 && no_if == 4)
    {
      // use the fourth hop
      if (hop_use < 4) continue;
      if (hop_use > 4) break;
    }

    insert_nexthop_to_routingtable (nexthop);
  }
}
#------------------------------------------------------------------------


# The following is the Chinese explanation of the algorithm 
#------------------------------------------------------------------------
为了让路由表为多路径传输提供更好的网络流量负载均衡支持，需要第二次改进OSPF-MDR，为每一个目的地址仅生成一条路由表项，这样，在节点M1中，生成的到节点M6的路由表项新增如下4条，此时的下一跳的个数为3：

nexthop via 112.26.0.2 dev eth0 weight1 to 112.26.1.6
nexthop via 112.26.0.3 dev eth0 weight1 to 112.26.2.6
nexthop via 112.26.0.4 dev eth0 weight1 to 112.26.3.6
nexthop via 112.26.0.2 dev eth0 weight1 to 112.26.4.6

if (num_nexthop == 3 && (no_if == 1 || no_if == 4)) 使用第一跳
if (num_nexthop == 3 && no_if == 2) 使用第二跳
if (num_nexthop == 3 && no_if == 3) 使用第三跳

如果下一跳的个数为1，则新增如下4条：
nexthop via nexthop-ip-1 dev eth0 weight1 to 112.26.1.6
nexthop via nexthop-ip-1 dev eth0 weight1 to 112.26.2.6
nexthop via nexthop-ip-1 dev eth0 weight1 to 112.26.3.6
nexthop via nexthop-ip-1 dev eth0 weight1 to 112.26.4.6
if (num_nexthop == 1) 使用第一跳

如果下一跳的个数为2，则新增如下4条：
nexthop via nexthop-ip-1 dev eth0 weight1 to 112.26.1.6
nexthop via nexthop-ip-2 dev eth0 weight1 to 112.26.2.6
nexthop via nexthop-ip-1 dev eth0 weight1 to 112.26.3.6
nexthop via nexthop-ip-2 dev eth0 weight1 to 112.26.4.6
if (num_nexthop == 2 && (no_if == 1 || no_if == 3)) 使用第一跳
if (num_nexthop == 2 && (no_if == 2 || no_if == 4)) 使用第二跳

如果下一跳的个数为4，则新增如下4条：
nexthop via nexthop-ip-1 dev eth0 weight1 to 112.26.1.6
nexthop via nexthop-ip-2 dev eth0 weight1 to 112.26.2.6
nexthop via nexthop-ip-3 dev eth0 weight1 to 112.26.3.6
nexthop via nexthop-ip-4 dev eth0 weight1 to 112.26.4.6
if (num_nexthop == 4 && no_if == 1) 使用第一跳
if (num_nexthop == 4 && no_if == 2) 使用第二跳
if (num_nexthop == 4 && no_if == 3) 使用第三跳
if (num_nexthop == 4 && no_if == 4) 使用第四跳

总结上面算法如下：
num_nexthop：下一跳的个数
no_if：对应于虚拟网络接口(e1,e2,e3,e4)

if (num_nexthop == 1 || (num_nexthop == 2 && (no_if == 1 || no_if == 3)) || (num_nexthop == 3 && (no_if == 1 || no_if == 4)) || (num_nexthop == 4 && no_if == 1)) 使用第一跳
if ((num_nexthop == 2 && (no_if == 2 || no_if == 4)) || (num_nexthop == 3 && no_if == 2) || (num_nexthop == 4 && no_if == 2)) 使用第二跳
if ((num_nexthop == 3 && no_if == 3) || (num_nexthop == 4 && no_if == 3)) 使用第三跳
if (num_nexthop == 4 && no_if == 4) 使用第四跳
#------------------------------------------------------------------------

